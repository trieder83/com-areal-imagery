# Use CUDA 12.4 enabled base image
FROM nvidia/cuda:12.4.0-runtime-ubuntu22.04

# Install Python 3.11 and curl
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    curl \
    && ln -s /usr/bin/python3.11 /usr/bin/python

# Install uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy project files first to leverage Docker cache
COPY pyproject.toml .

# Install PyTorch with CUDA 12.4 support first
RUN uv add --index pytorch-cu124 torch==2.4.0+cu124 torchvision==0.19.0+cu124

# Install all dependencies
RUN uv sync

# Copy application code
COPY test_flag_dedect.py .

# Copy YOLO model (make sure this file exists in your project directory)
COPY flags.pt .

# Create non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
# Copy uv to user path
RUN cp /root/.cargo/bin/uv /usr/local/bin/uv
USER appuser

# Expose port
EXPOSE 5000

# Set environment variables
ENV MODEL_PATH=flags.pt

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run the application with uv
CMD ["uv", "run", "test_flag_dedect.py"]
